# -*- coding: utf-8 -*-
"""DAA pt 13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mCwwZqZKosiZsIV2T4ct7mhmXT3goz_r

implementasi algoritma bread first search (bfs)
"""

def bfs(graph, start):
  visited = []
  queue = [start]

  while queue:
      node = queue.pop(0)
      if node not in visited:
          visited.append(node)
          neighbours = graph[node]
          for neighbour in neighbours:
              queue.append(neighbour)
  return visited

graph={ 'Amin' : {'Wasim', 'Nick', 'Mike'},
          'Wasim' : {'Imran', 'Amin'},
          'Imran' : {'Wasim', 'Faras'},
          'Faras' : {'Imran'},
          'Mike'  : {'Amin'},
          'Nick'  : {'Amin'}}

bfs(graph,'Amin')
['Amin', 'Wasim', 'Nick', 'Mike', 'Imran', 'Faras']

#O Amin --------------
#|          |         |
#O Wasim    O nick    O mike
#|
#O imran
#|
#O faras

bfs(graph, 'Amin')

#O Amin -----
#|          |         
#O Imran    O amin ----
#|          |         |
#O faras    O nick    O mike

bfs(graph, 'Wasim')

#O faras
#|       
#O imran
#|
#O wasim  O nick O mike
#|        |      | 
#O amin ---------

bfs(graph, 'Faras')

"""Latihan"""

graph={ 'Rektor' : {'Warek1', 'Warek2'},
          'Warek1' : {'Rektor'},
          'Warek2' : {'Rektor', 'Kaprodi1', 'Kaprodi2', 'Kaprodi3'},
          'Kaprodi1' : {'Warek2', 'DosenA', 'DosenB', 'DosenC'},
          'DosenA'  : {'Kaprodi1'},
          'DosenB'  : {'Kaprodi1'},
          'DosenC'  : {'Kaprodi1'},
          'Kaprodi2'  : {'Warek2', 'DosenD', 'DosenE'},
          'DosenD'  : {'Kaprodi2'},
          'DosenE'  : {'Kaprodi2'},
          'Kaprodi3'  : {'Warek2', 'DosenF', 'DosenG'},
          'DosenF'  : {'Kaprodi3'},
          'DosenG'  : {'Kaprodi3'}}

bfs(graph,'Rektor')

"""(dfs)"""

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start)
    for next in graph[start] - visited:
         dfs(graph, next, visited) 
    return visited

graph={ 'Amin' : {'Wasim', 'Nick', 'Mike'},
          'Wasim' : {'Imran', 'Amin'},
          'Imran' : {'Wasim', 'Faras'},
          'Faras' : {'Imran'},
          'Mike'  : {'Amin'},
          'Nick'  : {'Amin'}}

{'Amin', 'Faras', 'Imran', 'Mike', 'Nick', 'Wasim'}

#O amin ------------
#|         |         |
#O wasim   O nick    O mike
#|
#O imran
#| 
#O faras
#
#turun dari amin ke faras, geser ke nick & mike 

dfs(graph, 'Amin')

#O amin ------------
#|         |         |
#O wasim   O nick    O mike
#|
#O imran
#| 
#O faras
#
#turun dari wasim ke faras, geser ke nick & mike 

dfs(graph, 'Wasim')

#O amin ------------
#|         |         |
#O wasim   O nick    O mike
#|
#O imran
#| 
#O faras
#
#naik dari faras ke amin, geser ke nick & mike 

dfs(graph, 'Faras')

#O amin ------------
#|         |         |
#O wasim   O nick    O mike
#|
#O imran
#| 
#O faras
#
#naik dari nick ke amin, turun ke faras, geser ke mike 

dfs(graph, 'Nick')

"""Latihan"""

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start)
    for next in graph[start] - visited:
         dfs(graph, next, visited) 
    return visited

graph={ 'Rektor' : {'Warek1', 'Warek2'},
          'Warek1' : {'Rektor'},
          'Warek2' : {'Rektor', 'Kaprodi1', 'Kaprodi2', 'Kaprodi3'},
          'Kaprodi1' : {'Warek2', 'DosenA', 'DosenB', 'DosenC'},
          'DosenA'  : {'Kaprodi1'},
          'DosenB'  : {'Kaprodi1'},
          'DosenC'  : {'Kaprodi1'},
          'Kaprodi2'  : {'Warek2', 'DosenD', 'DosenE'},
          'DosenD'  : {'Kaprodi2'},
          'DosenE'  : {'Kaprodi2'},
          'Kaprodi3'  : {'Warek2', 'DosenF', 'DosenG'},
          'DosenF'  : {'Kaprodi3'},
          'DosenG'  : {'Kaprodi3'}}

dfs(graph, 'Rektor')